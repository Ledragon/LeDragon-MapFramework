{"version":3,"sources":["models/position.ts","map/projectionType.ts","map/projection.ts","utilities/logger.ts","utilities/getNameExtension.ts","utilities/loggerFactory.ts","map/map.ts","services/readerService.ts","services/countriesReaderService.ts"],"names":["LeDragon","LeDragon.Framework","LeDragon.Framework.Map","LeDragon.Framework.Map.Models","LeDragon.Framework.Map.Models.position","LeDragon.Framework.Map.Models.position.constructor","LeDragon.Framework.Map.projectionType","LeDragon.Framework.Map.projection","LeDragon.Framework.Map.projection.constructor","LeDragon.Framework.Map.projection.createProjection","LeDragon.Framework.Map.projection.resize","LeDragon.Framework.Map.projection.projectionType","LeDragon.Framework.Map.projection.projection","LeDragon.Framework.Map.projection.center","LeDragon.Framework.Map.projection.scale","LeDragon.Framework.Map.projection.rotate","LeDragon.Framework.Utilities","LeDragon.Framework.Utilities.logger","LeDragon.Framework.Utilities.logger.constructor","LeDragon.Framework.Utilities.logger.debugFormat","LeDragon.Framework.Utilities.logger.infoFormat","LeDragon.Framework.Utilities.logger.warningFormat","LeDragon.Framework.Utilities.logger.errorFormat","LeDragon.Framework.Utilities.logger.fatalFormat","LeDragon.Framework.Utilities.logger.format","LeDragon.Framework.Utilities.Extensions","LeDragon.Framework.Utilities.Extensions.getNameObject","LeDragon.Framework.Utilities.Extensions.getNameObject.constructor","LeDragon.Framework.Utilities.Extensions.getNameObject.getName","LeDragon.Framework.Utilities.Extensions.getNameObject.logger","LeDragon.Framework.Utilities.loggerFactory","LeDragon.Framework.Utilities.loggerFactory.constructor","LeDragon.Framework.Utilities.loggerFactory.getLogger","LeDragon.Framework.Map.map","LeDragon.Framework.Map.map.constructor","LeDragon.Framework.Map.map.init","LeDragon.Framework.Map.map.setSize","LeDragon.Framework.Map.map.drawCountries","LeDragon.Framework.Map.map.selectCountries","LeDragon.Framework.Map.map.appendCountries","LeDragon.Framework.Map.map.updateCountries","LeDragon.Framework.Map.map.deleteCountries","LeDragon.Framework.Map.map.drawStates","LeDragon.Framework.Map.map.addPosition","LeDragon.Framework.Map.map.selectPositions","LeDragon.Framework.Map.map.updatePositions","LeDragon.Framework.Map.map.centerOnPosition","LeDragon.Framework.Map.map.zoomOnCountry","LeDragon.Framework.Map.map.reset","LeDragon.Framework.Map.map.rotate","LeDragon.Framework.Map.map.type","LeDragon.Framework.Map.map.updateAll","LeDragon.Framework.Map.map.getCentering","LeDragon.Framework.Map.map.handle","LeDragon.Framework.Map.Services","LeDragon.Framework.Map.Services.readerService","LeDragon.Framework.Map.Services.readerService.constructor","LeDragon.Framework.Map.Services.readerService.read","LeDragon.Framework.Map.Services.countriesReaderService","LeDragon.Framework.Map.Services.countriesReaderService.constructor","LeDragon.Framework.Map.Services.countriesReaderService.get110m","LeDragon.Framework.Map.Services.countriesReaderService.get50m","LeDragon.Framework.Map.Services.countriesReaderService.get10m","LeDragon.Framework.Map.Services.countriesReaderService.getEurope110m","LeDragon.Framework.Map.Services.countriesReaderService.getStates10m","LeDragon.Framework.Map.Services.countriesReaderService.getStates"],"mappings":"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","file":"framework.js","sourcesContent":["module LeDragon.Framework.Map.Models{\r\n    export class position {\r\n        constructor(longitude: number, latitude: number) {\r\n            this.longitude = longitude;\r\n            this.latitude = latitude;\r\n        }\r\n\r\n        longitude: number;\r\n        latitude: number;\r\n        color: string;\r\n    }\r\n}","module LeDragon.Framework.Map{\r\n    export enum projectionType{\r\n        Mercator,\r\n        Orthographic\r\n    }\r\n}","/// <reference path=\"projectionType.ts\" />\r\nmodule LeDragon.Framework.Map {\r\n    export interface Iprojection {\r\n        projection(): d3.geo.Projection;\r\n        resize(width: number, height: number): void;\r\n        projectionType(value?: projectionType): projection | projectionType;\r\n        center(latitude: number, longitude: number): projection;\r\n        scale(value: number): projection;\r\n        rotate(value?: [number, number, number]): projection | [number, number, number];\r\n    }\r\n\r\n    export class projection {\r\n        private _projection: d3.geo.Projection;\r\n        private _width: number;\r\n        private _height: number;\r\n        private _scale: number;\r\n        private _type: projectionType;\r\n        private _center: [number, number];\r\n\r\n        constructor(private _d3: typeof d3, type: projectionType, width: number, height: number) {\r\n            this._width = width;\r\n            this._height = height;\r\n            this._type = type;\r\n            this._center = [0, 0];\r\n            this.createProjection();\r\n        }\r\n\r\n        private createProjection() {\r\n            switch (this._type) {\r\n                case projectionType.Mercator:\r\n                    this._projection = this._d3.geo.mercator()\r\n                        .center(this._center)\r\n                        .translate([this._width / 2, this._height / 2])\r\n                        .scale(this._width / 8);\r\n                    break;\r\n                case projectionType.Orthographic:\r\n                    this._projection = this._d3.geo.orthographic()\r\n                        .center(this._center)\r\n                        .translate([this._width / 2, this._height / 2])\r\n                        .scale(this._width / 2)\r\n                        .clipAngle(90);\r\n                    break;\r\n                default:\r\n                    throw new Error('Unknown projection type');\r\n                    break;\r\n            }\r\n        }\r\n\r\n        resize(width: number, height: number): void {\r\n            this._width = width;\r\n            this._height = height;\r\n            this._projection\r\n                .translate([width / 2, height / 2]);\r\n            switch (this._type) {\r\n                case projectionType.Mercator:\r\n                    this._projection.scale(width / 8);\r\n                    break;\r\n                case projectionType.Orthographic:\r\n                    this._projection.scale(width / 2);\r\n                    break;\r\n                default:\r\n                    throw new Error('Unknown projection type');\r\n                    break;\r\n            }\r\n        }\r\n\r\n        projectionType(value?: projectionType): projection | projectionType {\r\n            if (arguments) {\r\n                this._type = value;\r\n                this.createProjection();\r\n                return this;\r\n            }\r\n            return this._type;\r\n        }\r\n\r\n        projection(): d3.geo.Projection {\r\n            return this._projection;\r\n        }\r\n\r\n        center(latitude: number, longitude: number): projection {\r\n            this._center = [latitude, longitude];\r\n            this._projection.center(this._center);\r\n            return this;\r\n        }\r\n\r\n        scale(value: number): projection {\r\n            this._projection.scale(value);\r\n            return this;\r\n        }\r\n\r\n        rotate(value?: [number, number, number]): projection | [number, number, number] {\r\n            if (value) {\r\n                this._projection.rotate(value);\r\n                return this;\r\n            }\r\n            return this._projection.rotate();\r\n        }\r\n    }\r\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\nmodule LeDragon.Framework.Utilities {\r\n    export interface Ilogger {\r\n        debugFormat: (message: string) => void;\r\n        infoFormat: (message: string) => void;\r\n        warningFormat: (message: string) => void;\r\n        errorFormat: (message: string) => void;\r\n        fatalFormat: (message: string) => void;\r\n    }\r\n\r\n    export class logger implements Ilogger {\r\n\r\n        constructor(private console: Console, private _name:string) {\r\n\r\n        }\r\n        debugFormat(message: string): void {\r\n            this.console.debug(this.format('DEBUG', message));\r\n        }\r\n\r\n        infoFormat(message: string): void {\r\n            this.console.info(this.format('INFO', message));\r\n        }\r\n\r\n        warningFormat(message: string): void {\r\n            this.console.warn(this.format('WARN', message));\r\n        }\r\n\r\n        errorFormat(message: string): void {\r\n            this.console.error(this.format('ERROR', message));\r\n        }\r\n\r\n        fatalFormat(message: string): void {\r\n            this.console.error(this.format('FATAL', message));\r\n        }\r\n\r\n        private format(level: string, message: any): string {\r\n            var now = moment().format('YYYY-MM-DD HH:mm:ss.SSS');\r\n            var formatted = `[${now}] - [${this._name}] - ${level} - ${message}`;\r\n            \r\n            return formatted;\r\n        }\r\n    }\r\n}","/// <reference path=\"logger.ts\" />\r\nmodule LeDragon.Framework.Utilities.Extensions {\r\n    export class getNameObject {\r\n        getName(): string {\r\n            var funcNameRegex = /function (.{1,})\\(/;\r\n            var results = (funcNameRegex).exec((this).constructor.toString());\r\n            return (results && results.length > 1) ? results[1] : \"\";\r\n        }\r\n\r\n        logger(): Ilogger {\r\n            return new logger(console, this.getName());\r\n        }\r\n        \r\n    }\r\n}","/// <reference path=\"logger.ts\" />\r\nmodule LeDragon.Framework.Utilities {\r\n    export class loggerFactory {\r\n        private static _loggerList: Array<{ name: string, logger: Ilogger }>=[];\r\n\r\n        constructor() {\r\n        }\r\n        \r\n        static getLogger(name: string): Ilogger {\r\n            var l = _.find(loggerFactory._loggerList, l=> l.name === name);\r\n            if (!l) {\r\n                l = { logger: new logger(console, name), name: name };\r\n                loggerFactory._loggerList.push(l);\r\n            }\r\n            return l.logger;\r\n        }\r\n    }\r\n}","/// <reference path=\"../../typings/d3/d3.d.ts\" />\r\n/// <reference path=\"../../typings/geojson/geojson.d.ts\" />\r\n/// <reference path=\"../../typings/lodash/lodash.d.ts\" />\r\n/// <reference path=\"projection.ts\" />\r\n/// <reference path=\"projectionType.ts\" />\r\n/// <reference path=\"../models/position.ts\" />\r\n/// <reference path=\"../models/topojson.d.ts\" />\r\n/// <reference path=\"../utilities/getNameExtension.ts\" />\r\n/// <reference path=\"../utilities/loggerFactory.ts\" />\r\nmodule LeDragon.Framework.Map {\r\n    import position = Models.position;\r\n    export interface IworldMap {\r\n        drawCountries: (countries: TopoJSON.TopoJSONObject) => void;\r\n        addPosition: (longitude: number, latitude: number, color?: string) => void;\r\n        zoomOnCountry: (countryName: string) => void;\r\n        drawStates: (states: any, color?: string) => void;\r\n    }\r\n\r\n    export class map extends Utilities.Extensions.getNameObject implements IworldMap {\r\n        private _container: any;\r\n        private _group: d3.Selection<any>;\r\n        private _countriesGroup: d3.Selection<any>;\r\n        private _positionsGroup: d3.Selection<any>;\r\n        private _statesGroup: d3.Selection<any>;\r\n        private _borderGroup: d3.Selection<any>;\r\n\r\n        private _projection: Iprojection;\r\n        private _pathGenerator: d3.geo.Path;\r\n        // private _countries: TopoJSON.TopoJSONObject;\r\n        private _geoCountries: GeoJSON.FeatureCollection;\r\n        private _positions: Array<position>;\r\n\r\n        private _scale;\r\n\r\n        private width: number;\r\n        private height: number;\r\n        private _ratio: number;\r\n\r\n        private _logger: Utilities.Ilogger;\r\n\r\n        constructor(container: any, private _d3: typeof d3) {\r\n            super();\r\n            this._logger = Utilities.loggerFactory.getLogger('map');\r\n            this.init(container);\r\n        }\r\n\r\n        private init(container) {\r\n            this.handle(() => {\r\n                var c = this._d3.select(container);\r\n                this._container = c;\r\n                var svg = c\r\n                    .append('svg');\r\n                var gradient = svg\r\n                    .append('defs')\r\n                    .append('radialGradient')\r\n                    .attr({\r\n                        'id': 'grad',\r\n                        'x1': '0%',\r\n                        'x2': '0%',\r\n                        'y1': '100%',\r\n                        'y2': '0%'\r\n                    });\r\n                gradient.append('stop')\r\n                    .attr('offset', '0%')\r\n                    .style({\r\n                        'stop-color': 'rgba(120,195,251,0)',\r\n                        'stop-opacity': '1'\r\n                    });\r\n                gradient.append('stop')\r\n                    .attr('offset', '100%')\r\n                    .style({\r\n                        'stop-color': 'rgba(120,195,251,1)',\r\n                        'stop-opacity': '1'\r\n                    });\r\n                ;\r\n                this._group = svg\r\n                    .append('g')\r\n                    .classed('map', true);\r\n\r\n                this._borderGroup = this._group.append('g')\r\n                    .classed('border', true);\r\n                this._countriesGroup = this._group.append('g')\r\n                    .classed('countries', true);\r\n                this._statesGroup = this._group.append('g')\r\n                    .classed('states', true);\r\n                this._positionsGroup = this._group.append('g')\r\n                    .classed('positions', true);\r\n\r\n                this._geoCountries = {\r\n                    features: [],\r\n                    bbox: <any>{},\r\n                    crs: <any>{},\r\n                    type: ''\r\n                };\r\n                this._positions = [];\r\n                this._ratio = 1;\r\n                this._projection = new projection(this._d3, projectionType.Orthographic, 1, 1);\r\n                this._borderGroup.append('circle')\r\n                    .style('fill', 'url(#grad)');\r\n\r\n                this._pathGenerator = (<d3.geo.Path>this._d3.geo.path()).projection(this._projection.projection());\r\n                this.setSize(c);\r\n\r\n                (<d3.Selection<any>>this._d3.select(window))\r\n                    .on('resize.' + c.attr('id'), (d, i) => {\r\n                        this.setSize(c);\r\n                    });\r\n            }, 'Initialization failed');\r\n        }\r\n\r\n        private setSize(container: d3.Selection<any>): void {\r\n            var width = (<any>container.node()).clientWidth;\r\n            var height = width / this._ratio;\r\n            // if (!width) {\r\n            //     width = height * this._ratio;\r\n            // } else if (!height) {\r\n            //     height = width / this._ratio;\r\n            // }\r\n\r\n            this.width = width;\r\n            this.height = height;\r\n            container.select('svg').attr({\r\n                'width': width,\r\n                'height': height\r\n            });\r\n            this._borderGroup.select('circle')\r\n                .transition()\r\n                .attr({\r\n                    r: width / 2,\r\n                    cx: width / 2,\r\n                    cy: width / 2\r\n                });\r\n            this._logger.debugFormat(`width: ${width}, height:${height}`);\r\n            this._projection.resize(width, height);\r\n            this.updateAll();\r\n        }\r\n\r\n        drawCountries(countries: TopoJSON.TopoJSONObject): void {\r\n            this.handle(\r\n                () => {\r\n                    this._logger.debugFormat(`Drawing countries.`);\r\n                    this._geoCountries = topojson.feature(countries, countries.objects.countries);\r\n\r\n                    var dataSelection = this.selectCountries();\r\n                    this.appendCountries(dataSelection);\r\n                    this.updateCountries(dataSelection);\r\n                    this.deleteCountries(dataSelection);\r\n\r\n                    this._logger.debugFormat('Countries drawn.');\r\n                },\r\n                'Drawing of map failed.'\r\n            );\r\n        }\r\n\r\n        private selectCountries(): d3.selection.Update<GeoJSON.Feature> {\r\n            var dataSelection = this._countriesGroup\r\n                .selectAll('.country')\r\n                .data(this._geoCountries.features);\r\n            return dataSelection;\r\n        }\r\n\r\n        private appendCountries(selection: d3.selection.Update<GeoJSON.Feature>) {\r\n            selection.enter()\r\n                .append('g')\r\n                .classed('country', true)\r\n                .append('path')\r\n                .classed('normal', true)\r\n                .on('click', (d, i) => {\r\n                    var mouse = d3.mouse((<any>d3.event).currentTarget);\r\n                    console.log(mouse);\r\n                    // var centering = this.getCentering(d, this._pathGenerator);\r\n                    var coordinates = (<any>this._projection.projection())\r\n                        .invert(mouse);\r\n                    this._logger.debugFormat(coordinates);\r\n                    this._projection.rotate([-coordinates[0], -coordinates[1], 0]);\r\n                    // .scale(centering.scale)\r\n                    // .translate(centering.translate)\r\n                    // .center(centering.center);\r\n                    this.updateAll();\r\n                });\r\n        }\r\n\r\n        private updateCountries(selection: d3.Selection<GeoJSON.Feature>) {\r\n            selection\r\n                .attr('id', (d: any, i: any) => d.properties.adm0_a3)\r\n            selection.select('path')\r\n                .transition()\r\n                .attr('d', (d: any, i: any) => this._pathGenerator(d));\r\n        }\r\n\r\n        private deleteCountries(selection: d3.selection.Update<GeoJSON.Feature>) {\r\n            selection.exit().remove();\r\n        }\r\n\r\n        drawStates(states: any, color?: string) {\r\n            this._logger.debugFormat(states);\r\n            var selection = this._statesGroup\r\n                .selectAll('path')\r\n                .data(states);\r\n            selection.enter()\r\n                .append('path');\r\n            selection.attr('d', (d: any, i: any) => this._pathGenerator(d));\r\n            if (color) {\r\n                selection.attr('fill', color);\r\n            }\r\n            selection.exit().remove();\r\n        }\r\n\r\n        addPosition(longitude: number, latitude: number, color?: string): void {\r\n            this.handle(() => {\r\n                this._logger.debugFormat(`Adding position (${longitude}, ${latitude}).`);\r\n                var p = new position(longitude, latitude);\r\n                p.color = color;\r\n                this._positions.push(p);\r\n                var dataSelection = this.selectPositions();\r\n                dataSelection.enter()\r\n                    .append('circle')\r\n                    .attr({\r\n                        'r': 2\r\n                    });\r\n                this.updatePositions(dataSelection);\r\n                this._logger.debugFormat('Position added.');\r\n            }, 'Addition of position failed');\r\n        }\r\n\r\n        private selectPositions(): d3.selection.Update<position> {\r\n            var dataSelection = this._positionsGroup\r\n                .selectAll('circle')\r\n                .data(this._positions);\r\n            return dataSelection;\r\n        }\r\n\r\n        private updatePositions(selection: d3.selection.Update<position>) {\r\n            var d3Projection = this._projection.projection();\r\n            selection\r\n                .transition()\r\n                .attr({\r\n                    'cx': (d: position) => d3Projection([d.longitude, d.latitude])[0],\r\n                    'cy': (d: position) => d3Projection([d.longitude, d.latitude])[1],\r\n                    'r': 2\r\n                })\r\n                .style({\r\n                    'fill': d=> d.color ? d.color : 'black'\r\n                });\r\n        }\r\n\r\n        centerOnPosition(longitude: number, latitude: number) {\r\n            this.handle(() => {\r\n                this._scale = 8000;\r\n                this._projection.projection()\r\n                    .center([longitude, latitude])\r\n                    .scale(this._scale);\r\n                this._countriesGroup\r\n                    .selectAll('path')\r\n                    .data(this._geoCountries.features)\r\n                    .transition()\r\n                    .attr('d', (d: any) => {\r\n                        var result = this._pathGenerator(d);\r\n                        return result;\r\n                    });\r\n                this.updatePositions(this.selectPositions());\r\n            }, 'Centering on position failed.');\r\n        }\r\n\r\n        zoomOnCountry(countryName: string): void {\r\n            var country = _.find(this._geoCountries.features,\r\n                c=> c.properties.name.toLowerCase() === countryName.toLowerCase());\r\n            if (!country) {\r\n                this._logger.errorFormat(`No country with name ${countryName} found.`);\r\n            }\r\n            else {\r\n                var c = this.getCentering(country, this._pathGenerator);\r\n                this._projection.projection()\r\n                    .scale(c.scale)\r\n                    .translate(c.translate)\r\n                    .center(<any>c.center);\r\n                this.updateAll();\r\n            }\r\n        }\r\n\r\n        reset() {\r\n            this._projection\r\n                // .scale(200)\r\n                .center(0, 0)\r\n                .rotate([0, 0, 0]);\r\n            this.updateAll();\r\n            // var dataSelection = this.selectCountries();\r\n            // this.updateCountries(dataSelection);\r\n        }\r\n\r\n        rotate(value: [number, number, number]) {\r\n            this._projection\r\n                .rotate(value);\r\n            this.updateAll();\r\n        }\r\n\r\n        type(value: projectionType) {\r\n            this._projection.projectionType(value);\r\n            this._pathGenerator = (<d3.geo.Path>this._d3.geo.path()).projection(this._projection.projection());\r\n            if (value === projectionType.Mercator) {\r\n                this._borderGroup.transition().style('visibility', 'hidden');\r\n                this._ratio = 16 / 9;\r\n            } else {\r\n                this._borderGroup.transition().style('visibility', 'visible');\r\n                this._ratio = 1;\r\n            }\r\n            this.updateAll();\r\n            this.setSize(this._container);\r\n        }\r\n\r\n        private updateAll() {\r\n            this._logger.debugFormat('Update all');\r\n            // if (this._countries) {\r\n            this.updateCountries(this.selectCountries());\r\n            // }\r\n            this.updatePositions(this.selectPositions());\r\n        }\r\n\r\n        private getCentering(d, pathGenerator: d3.geo.Path) {\r\n            var bounds = pathGenerator.bounds(d);\r\n            var dx = bounds[1][0] - bounds[0][0];\r\n            var dy = bounds[1][1] - bounds[0][1];\r\n            var x = (bounds[0][0] + bounds[1][0]) / 2;\r\n            var y = (bounds[0][1] + bounds[1][1]) / 2;\r\n            var scale = .9 / Math.max(dx / this.width, dy / this.height);\r\n            var translate: [number, number] = [this.width / 2 - scale * x, this.height / 2 - scale * y];\r\n            var center: [number, number] = [x, y];\r\n            return {\r\n                scale: scale,\r\n                translate: translate,\r\n                center: center\r\n            };\r\n        }\r\n\r\n        private handle(method: any, message: string) {\r\n            try {\r\n                method();\r\n            } catch (e) {\r\n                this._logger.errorFormat(message);\r\n                this._logger.errorFormat(e.message);\r\n                this._logger.errorFormat(e.stack);\r\n            }\r\n        }\r\n    }\r\n}","/// <reference path=\"../utilities/loggerFactory.ts\" />\r\n\r\nmodule LeDragon.Framework.Map.Services {\r\n    export interface IreaderService {\r\n        read: (fileName: string) => Q.IPromise<any>;\r\n    }\r\n\r\n    export class readerService implements IreaderService {\r\n        private logger: Utilities.Ilogger;\r\n        constructor(private d3: any) {\r\n            this.logger = LeDragon.Framework.Utilities.loggerFactory.getLogger('readerservice');\r\n        }\r\n\r\n        read(fileName: string): Q.IPromise<any> {\r\n            //TODO abstarct Q\r\n            this.logger.infoFormat(`Reading file ${fileName}.`);\r\n            var defered = Q.defer();\r\n            this.d3.json(fileName, (error, data) => {\r\n                if (error) {\r\n                    this.logger.errorFormat(error);\r\n                    defered.reject(error);\r\n                } else {\r\n                    this.logger.infoFormat(`File ${fileName} successfully read.`);\r\n                    defered.resolve(data);\r\n                }\r\n            });\r\n\r\n            return defered.promise;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../typings/d3/d3.d.ts\" />\r\n/// <reference path=\"../../typings/Q/Q.d.ts\" />\r\n/// <reference path=\"../../typings/geojson/geojson.d.ts\" />\r\n/// <reference path=\"../models/topojson.d.ts\" />\r\n/// <reference path=\"../utilities/logger.ts\" />\r\n/// <reference path=\"../utilities/loggerFactory.ts\" />\r\n/// <reference path=\"./readerService.ts\"/>\r\nmodule LeDragon.Framework.Map.Services {\r\n\timport topoJsonObject = TopoJSON.TopoJSONObject;\r\n\texport interface IcountriesReader {\r\n\t\tget110m: () => Q.IPromise<TopoJSON.TopoJSONObject>;\r\n\t\tget50m: () => Q.IPromise<TopoJSON.TopoJSONObject>;\r\n\t\tget10m: () => Q.IPromise<TopoJSON.TopoJSONObject>;\r\n\r\n\t\tgetStates10m: (country_adm0_a3?: string) => Q.IPromise<Array<GeoJSON.Feature>>;\r\n\r\n\t\tgetEurope110m: () => Q.IPromise<TopoJSON.TopoJSONObject>;\r\n\t}\r\n\r\n\texport class countriesReaderService extends readerService implements IcountriesReader {\r\n\t\tprivate _110m = '/data/110m/countries.topo.json';\r\n\t\tprivate _states10mPath = '/data/10m/states.topo.json';\r\n\t\tprivate _states10m: GeoJSON.FeatureCollection;\r\n        private _logger: Utilities.Ilogger;\r\n\t\tconstructor(private _d3: any) {\r\n            super(_d3);\r\n            this._logger = Utilities.loggerFactory.getLogger('countriesReaderService');\r\n\t\t}\r\n\r\n\t\tget110m(): Q.IPromise<topoJsonObject> {\r\n\t\t\treturn super.read(this._110m);\r\n\t\t}\r\n\r\n\t\tget50m(): Q.IPromise<topoJsonObject> {\r\n\t\t\tvar defered = Q.defer<topoJsonObject>();\r\n\t\t\treturn defered.promise;\r\n\t\t}\r\n\r\n\t\tget10m(): Q.IPromise<topoJsonObject> {\r\n\t\t\tvar defered = Q.defer<topoJsonObject>();\r\n\t\t\treturn defered.promise;\r\n\t\t}\r\n\r\n\t\tgetEurope110m(): Q.IPromise<TopoJSON.TopoJSONObject> {\r\n\t\t\tvar defered = Q.defer<topoJsonObject>();\r\n\t\t\tsuper.read(this._110m).then((countries: topoJsonObject) => {\r\n\t\t\t\tconsole.log(countries);\r\n\t\t\t\tvar europe = countries;\r\n\t\t\t\tdefered.resolve(europe);\r\n\t\t\t});\r\n\t\t\treturn defered.promise;\r\n\t\t}\r\n\r\n\t\tgetStates10m(country_adm0_a3?: string): Q.IPromise<Array<GeoJSON.Feature>> {\r\n\t\t\tvar defered = Q.defer<Array<GeoJSON.Feature>>();\r\n\t\t\tif (!this._states10m) {\r\n\t\t\t\tthis._logger.debugFormat('Reading states file.');\r\n\t\t\t\td3.json(this._states10mPath, (error, data) => {\r\n\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\tthis._logger.errorFormat(error);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._logger.debugFormat('Successfully read states.');\r\n\t\t\t\t\t\tvar geo = topojson.feature(data, data.objects['states-provinces']);\r\n\t\t\t\t\t\tthis._states10m = geo;\r\n\t\t\t\t\t\tdefered.resolve(this.getStates(country_adm0_a3));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tdefered.resolve(this.getStates(country_adm0_a3));\r\n\t\t\t}\r\n\t\t\treturn defered.promise;\r\n\r\n\t\t}\r\n\r\n\t\tprivate getStates(country_adm0_a3?: string): Array<GeoJSON.Feature> {\r\n\t\t\tvar result = this._states10m.features;\r\n\t\t\tif (country_adm0_a3) {\r\n\t\t\t\tresult = this._states10m.features.filter(f=> {\r\n\t\t\t\t\treturn f.properties.adm0_a3 === country_adm0_a3;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t}\r\n}"],"sourceRoot":"/source/"}