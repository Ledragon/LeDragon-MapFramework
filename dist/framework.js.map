{"version":3,"sources":["models/position.ts","utilities/logger.ts","map/projectionType.ts","map/projection.ts","map/map.ts"],"names":["LeDragon","LeDragon.Framework","LeDragon.Framework.Map","LeDragon.Framework.Map.Models","LeDragon.Framework.Map.Models.position","LeDragon.Framework.Map.Models.position.constructor","LeDragon.Framework.Utilities","LeDragon.Framework.Utilities.logger","LeDragon.Framework.Utilities.logger.constructor","LeDragon.Framework.Utilities.logger.debugFormat","LeDragon.Framework.Utilities.logger.infoFormat","LeDragon.Framework.Utilities.logger.warningFormat","LeDragon.Framework.Utilities.logger.errorFormat","LeDragon.Framework.Utilities.logger.fatalFormat","LeDragon.Framework.Map.projectionType","LeDragon.Framework.Map.projection","LeDragon.Framework.Map.projection.constructor","LeDragon.Framework.Map.projection.createProjection","LeDragon.Framework.Map.projection.resize","LeDragon.Framework.Map.projection.projectionType","LeDragon.Framework.Map.projection.projection","LeDragon.Framework.Map.projection.center","LeDragon.Framework.Map.projection.scale","LeDragon.Framework.Map.map","LeDragon.Framework.Map.map.constructor","LeDragon.Framework.Map.map.init","LeDragon.Framework.Map.map.setSize","LeDragon.Framework.Map.map.drawCountries","LeDragon.Framework.Map.map.selectCountries","LeDragon.Framework.Map.map.appendCountries","LeDragon.Framework.Map.map.updateCountries","LeDragon.Framework.Map.map.deleteCountries","LeDragon.Framework.Map.map.drawStates","LeDragon.Framework.Map.map.addPosition","LeDragon.Framework.Map.map.selectPositions","LeDragon.Framework.Map.map.updatePositions","LeDragon.Framework.Map.map.centerOnPosition","LeDragon.Framework.Map.map.zoomOnCountry","LeDragon.Framework.Map.map.reset","LeDragon.Framework.Map.map.type","LeDragon.Framework.Map.map.updateAll","LeDragon.Framework.Map.map.getCentering","LeDragon.Framework.Map.map.handle"],"mappings":"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","file":"framework.js","sourcesContent":["module LeDragon.Framework.Map.Models{\r\n    export class position {\r\n        constructor(longitude: number, latitude: number) {\r\n            this.longitude = longitude;\r\n            this.latitude = latitude;\r\n        }\r\n\r\n        longitude: number;\r\n        latitude: number;\r\n        color: string;\r\n    }\r\n}","module LeDragon.Framework.Utilities {\r\n    export interface Ilogger {\r\n        debugFormat: (message: string) => void;\r\n        infoFormat: (message: string) => void;\r\n        warningFormat: (message: string) => void;\r\n        errorFormat: (message: string) => void;\r\n        fatalFormat: (message: string) => void;\r\n    }\r\n\r\n    export class logger implements Ilogger{\r\n        constructor(private console: Console) {\r\n            \r\n        }\r\n        debugFormat(message: string): void {\r\n            this.console.debug(message);\r\n        }\r\n\r\n        infoFormat(message: string): void {\r\n            this.console.info(message);\r\n        }\r\n\r\n        warningFormat(message: string): void {\r\n            this.console.warn(message);\r\n        }\r\n\r\n        errorFormat(message: string): void {\r\n            this.console.error(message);\r\n        }\r\n\r\n        fatalFormat(message: string): void {\r\n            this.console.error(message);\r\n        }\r\n    }\r\n}","module LeDragon.Framework.Map{\r\n    export enum projectionType{\r\n        Mercator,\r\n        Orthographic\r\n    }\r\n}","/// <reference path=\"../../typings/d3/d3.d.ts\" />\r\n/// <reference path=\"projectionType.ts\" />\r\nmodule LeDragon.Framework.Map {\r\n    export interface Iprojection {\r\n        projection(): d3.geo.Projection;\r\n        resize(width: number, height: number): void;\r\n        projectionType(value?: projectionType): projection | projectionType;\r\n        center(latitude: number, longitude: number): projection;\r\n        scale(value: number): projection;\r\n    }\r\n\r\n    export class projection {\r\n        private _projection: d3.geo.Projection;\r\n        private _width: number;\r\n        private _height: number;\r\n        private _scale: number;\r\n        private _type: projectionType;\r\n        private _center: [number, number];\r\n\r\n        constructor(private _d3: typeof d3, type: projectionType, width: number, height: number) {\r\n            this._width = width;\r\n            this._height = height;\r\n            this._type = type;\r\n            this._center = [0, 0];\r\n            this.createProjection();\r\n        }\r\n\r\n        private createProjection() {\r\n            switch (this._type) {\r\n                case projectionType.Mercator:\r\n                    this._projection = this._d3.geo.mercator()\r\n                        .center(this._center)\r\n                        .translate([this._width / 2, this._height / 2])\r\n                        .scale(this._width / 8);\r\n                    break;\r\n                case projectionType.Orthographic:\r\n                    this._projection = this._d3.geo.orthographic()\r\n                        .center(this._center)\r\n                        .translate([this._width / 2, this._height / 2])\r\n                        .scale(this._width / 2);\r\n                    break;\r\n                default:\r\n                    throw new Error('Unknown projection type');\r\n                    break;\r\n            }\r\n        }\r\n\r\n        resize(width: number, height: number): void {\r\n            this._width = width;\r\n            this._height = height;\r\n            this._projection\r\n                .translate([width / 2, height / 2]);\r\n            switch (this._type) {\r\n                case projectionType.Mercator:\r\n                    this._projection.scale(width / 8);\r\n                    break;\r\n                case projectionType.Orthographic:\r\n                    this._projection.scale(width / 2);\r\n                    break;\r\n                default:\r\n                    throw new Error('Unknown projection type');\r\n                    break;\r\n            }\r\n        }\r\n\r\n        projectionType(value?: projectionType): projection | projectionType {\r\n            if (arguments) {\r\n                this._type = value;\r\n                this.createProjection();\r\n                return this;\r\n            }\r\n            return this._type;\r\n        }\r\n\r\n        projection(): d3.geo.Projection {\r\n            return this._projection;\r\n        }\r\n\r\n        center(latitude: number, longitude: number): projection {\r\n            this._center = [latitude, longitude];\r\n            this._projection.center(this._center);\r\n            return this;\r\n        }\r\n\r\n        scale(value: number): projection {\r\n            this._projection.scale(value);\r\n            return this;\r\n        }\r\n    }\r\n}","/// <reference path=\"../../typings/d3/d3.d.ts\" />\r\n/// <reference path=\"../../typings/lodash/lodash.d.ts\" />\r\n/// <reference path=\"../../typings/geojson/geojson.d.ts\" />\r\n/// <reference path=\"../topojson.d.ts\" />\r\n/// <reference path=\"../models/position.ts\" />\r\n/// <reference path=\"../utilities/logger.ts\" />\r\n/// <reference path=\"projection.ts\" />\r\n/// <reference path=\"projectionType.ts\" />\r\nmodule LeDragon.Framework.Map {\r\n    import position = Models.position;\r\n    export interface IworldMap {\r\n        drawCountries: (countries: TopoJSON.TopoJSONObject) => void;\r\n        addPosition: (longitude: number, latitude: number, color?: string) => void;\r\n        zoomOnCountry: (countryName: string) => void;\r\n        drawStates: (states: any, color?: string) => void;\r\n    }\r\n\r\n    export class map implements IworldMap {\r\n        private _group: d3.Selection<any>;\r\n        private _countriesGroup: d3.Selection<any>;\r\n        private _positionsGroup: d3.Selection<any>;\r\n        private _statesGroup: d3.Selection<any>;\r\n\r\n        private _projection: Iprojection;\r\n        private _pathGenerator: d3.geo.Path;\r\n        // private _countries: TopoJSON.TopoJSONObject;\r\n        private _geoCountries: GeoJSON.FeatureCollection;\r\n        private _positions: Array<position>;\r\n\r\n        private _scale;\r\n\r\n        private width: number;\r\n        private height: number;\r\n        private _ratio: number;\r\n\r\n        constructor(container: any, private _logger: Utilities.Ilogger, private _d3: typeof d3) {\r\n            this.init(container)\r\n        }\r\n\r\n        private init(container) {\r\n            this.handle(() => {\r\n                var c = this._d3.select(container);\r\n                this._group = c\r\n                    .append('svg')\r\n                    .append('g')\r\n                    .classed('map', true);\r\n                this._countriesGroup = this._group.append('g')\r\n                    .classed('countries', true);\r\n                this._statesGroup = this._group.append('g')\r\n                    .classed('states', true);\r\n                this._positionsGroup = this._group.append('g')\r\n                    .classed('positions', true);\r\n\r\n                this._geoCountries = {\r\n                    features: [],\r\n                    bbox: <any>{},\r\n                    crs: <any>{},\r\n                    type: ''\r\n                };\r\n                this._positions = [];\r\n                this._ratio = 1;\r\n                this._projection = new projection(this._d3, projectionType.Orthographic, 1, 1);\r\n                this._pathGenerator = (<d3.geo.Path>this._d3.geo.path()).projection(this._projection.projection());\r\n                this.setSize(c);\r\n\r\n                (<d3.Selection<any>>this._d3.select(window))\r\n                    .on('resize', (d, i) => {\r\n                        this.setSize(c);\r\n                    });\r\n            }, 'Initialization failed');\r\n        }\r\n\r\n        private setSize(container: d3.Selection<any>): void {\r\n            var width = (<any>container.node()).clientWidth;\r\n            var height;\r\n            if (!width) {\r\n                width = height * this._ratio;\r\n            } else if (!height) {\r\n                height = width / this._ratio;\r\n            }\r\n\r\n            this.width = width;\r\n            this.height = height;\r\n            container.select('svg').attr({\r\n                'width': width,\r\n                'height': height\r\n            });\r\n            this._logger.debugFormat(`width: ${width}, height:${height}`);\r\n            this._projection.resize(width, height);\r\n            this._pathGenerator = (<d3.geo.Path>this._d3.geo.path()).projection(this._projection.projection());\r\n            this.updateAll();\r\n            \r\n            // var dataSelection = this.selectCountries();\r\n            // this.updateCountries(dataSelection);\r\n            // if (this._positions) {\r\n            //     this.updatePositions(this.selectPositions());\r\n            // }\r\n        }\r\n\r\n        drawCountries(countries: TopoJSON.TopoJSONObject): void {\r\n            this.handle(\r\n                () => {\r\n                    this._logger.debugFormat(`Drawing countries.`);\r\n                    // this._countries = countries;\r\n                    this._geoCountries = topojson.feature(countries, countries.objects.countries);\r\n\r\n                    var dataSelection = this.selectCountries();\r\n                    this.appendCountries(dataSelection);\r\n                    this.updateCountries(dataSelection);\r\n                    this.deleteCountries(dataSelection);\r\n\r\n                    this._logger.debugFormat('Countries drawn.');\r\n                },\r\n                'Drawing of map failed.'\r\n            );\r\n        }\r\n\r\n        private selectCountries(): d3.selection.Update<GeoJSON.Feature> {\r\n            var dataSelection = this._countriesGroup\r\n                .selectAll('.country')\r\n                .data(this._geoCountries.features);\r\n            return dataSelection;\r\n        }\r\n\r\n        private appendCountries(selection: d3.selection.Update<GeoJSON.Feature>) {\r\n            selection.enter()\r\n                .append('g')\r\n                .classed('country', true)\r\n                .append('path')\r\n                .classed('normal', true);\r\n        }\r\n\r\n        private updateCountries(selection: d3.Selection<GeoJSON.Feature>) {\r\n            selection.select('.country')\r\n                .attr('id', (d: any, i: any) => d.properties.adm0_a3)\r\n            selection.select('path')\r\n                .attr('d', (d: any, i: any) => this._pathGenerator(d));\r\n        }\r\n\r\n        private deleteCountries(selection: d3.selection.Update<GeoJSON.Feature>) {\r\n            selection.exit().remove();\r\n        }\r\n\r\n        drawStates(states: any, color?: string) {\r\n            this._logger.debugFormat(states);\r\n            var selection = this._statesGroup\r\n                .selectAll('path')\r\n                .data(states);\r\n            selection.enter()\r\n                .append('path');\r\n            selection.attr('d', (d: any, i: any) => this._pathGenerator(d));\r\n            if (color) {\r\n                selection.attr('fill', color);\r\n            }\r\n            selection.exit().remove();\r\n        }\r\n\r\n        addPosition(longitude: number, latitude: number, color?: string): void {\r\n            this.handle(() => {\r\n                this._logger.debugFormat(`Adding position (${longitude}, ${latitude}).`);\r\n                var p = new position(longitude, latitude);\r\n                p.color = color;\r\n                this._positions.push(p);\r\n                var dataSelection = this.selectPositions();\r\n                dataSelection.enter()\r\n                    .append('circle')\r\n                    .attr({\r\n                        'r': 2\r\n                    });\r\n                this.updatePositions(dataSelection);\r\n                this._logger.debugFormat('Position added.');\r\n            }, 'Addition of position failed');\r\n        }\r\n\r\n        private selectPositions(): d3.selection.Update<position> {\r\n            var dataSelection = this._positionsGroup.selectAll('circle')\r\n                .data(this._positions);\r\n            return dataSelection;\r\n        }\r\n\r\n        private updatePositions(selection: d3.selection.Update<position>) {\r\n            var d3Projection = this._projection.projection();\r\n            selection\r\n                .attr({\r\n                    'cx': (d: position) => d3Projection([d.longitude, d.latitude])[0],\r\n                    'cy': (d: position) => d3Projection([d.longitude, d.latitude])[1],\r\n                    'r': 2\r\n                })\r\n                .style({\r\n                    'fill': d=> d.color ? d.color : 'black'\r\n                });\r\n        }\r\n\r\n        centerOnPosition(longitude: number, latitude: number) {\r\n            this.handle(() => {\r\n                this._scale = 8000;\r\n                this._projection.projection()\r\n                    .center([longitude, latitude])\r\n                    .scale(this._scale);\r\n                this._countriesGroup\r\n                    .selectAll('path')\r\n                    .data(this._geoCountries.features)\r\n                    .transition()\r\n                    .attr('d', (d: any) => {\r\n                        var result = this._pathGenerator(d);\r\n                        return result;\r\n                    });\r\n                this.updatePositions(this.selectPositions());\r\n            }, 'Centering on position failed.');\r\n        }\r\n\r\n        zoomOnCountry(countryName: string): void {\r\n            var country = _.find(this._geoCountries.features,\r\n                c=> c.properties.name.toLowerCase() === countryName.toLowerCase());\r\n            if (!country) {\r\n                this._logger.errorFormat(`No country with name ${countryName} found.`);\r\n            }\r\n            else {\r\n                var c = this.getCentering(country, this._pathGenerator);\r\n            }\r\n        }\r\n\r\n        reset() {\r\n            this._projection\r\n                .scale(200)\r\n                .center(0, 0);\r\n            var dataSelection = this.selectCountries();\r\n            this.updateCountries(dataSelection);\r\n        }\r\n\r\n        type(value: projectionType) {\r\n            this._projection.projectionType(value);\r\n\r\n        }\r\n\r\n        private updateAll() {\r\n            // if (this._countries) {\r\n            this.updateCountries(this.selectCountries());\r\n            // }\r\n            this.updatePositions(this.selectPositions());\r\n        }\r\n\r\n        private getCentering(d, pathGenerator: d3.geo.Path) {\r\n            var bounds = pathGenerator.bounds(d);\r\n            var dx = bounds[1][0] - bounds[0][0];\r\n            var dy = bounds[1][1] - bounds[0][1];\r\n            var x = (bounds[0][0] + bounds[1][0]) / 2;\r\n            var y = (bounds[0][1] + bounds[1][1]) / 2;\r\n            var scale = .9 / Math.max(dx / this.width, dy / this.height);\r\n            var translate = [this.width / 2 - scale * x, this.height / 2 - scale * y];\r\n            return {\r\n                scale: scale,\r\n                translate: translate\r\n            };\r\n        }\r\n\r\n        private handle(method: any, message: string) {\r\n            try {\r\n                method();\r\n            } catch (e) {\r\n                this._logger.errorFormat(message);\r\n                this._logger.errorFormat(e.message);\r\n                this._logger.errorFormat(e.stack);\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}